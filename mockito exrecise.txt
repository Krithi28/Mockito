import org.testng.annotations.Test;
import org.testng.Assert;
import com.ask.aske.core.dataprovider.Environment;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.powermock.api.mockito.PowerMockito.mock;
import static org.powermock.api.mockito.PowerMockito.verifyZeroInteractions;
import static org.powermock.api.mockito.internal.verification.VerifyNoMoreInteractions.verifyNoMoreInteractions;
import org.mockito.exceptions.verification.TooManyActualInvocations;
/**
 * Created by 441691 on 6/18/2015.
 */
public class EnvironmentUtilTest {

    EnvironmentUtil environmentUtil = new EnvironmentUtil();

    @Mock
    List mockedList = mock(List.class);
    List mockOne=mock(List.class);
    List mockTwo=mock(List.class);
    List mockThree=mock(List.class);

    @Test
    public void verificationTimesSampleTest()
    {
        //using mock
        mockedList.add("once");

        mockedList.add("twice");
        mockedList.add("twice");

        mockedList.add("three times");
        mockedList.add("three times");
        mockedList.add("three times");

        //following two verifications work exactly the same - times(1) is used by default
        verify(mockedList).add("once");
        verify(mockedList, times(1)).add("once");

        //exact number of invocations verification
        verify(mockedList, times(2)).add("twice");
        verify(mockedList, times(3)).add("three times");

        //verification using never(). never() is an alias to times(0)
        verify(mockedList, never()).add("never happened");

        //verification using atLeastOnce()
        verify(mockedList, atLeastOnce()).add("three times");
    }

    @Test
    public void argumentMatcherSampleTest()
    {
        //stubbing using built-in anyInt() argument matcher
        stub(mockedList.get(anyInt())).toReturn("element");

        //following prints "element"
        System.out.println(mockedList.get(999));

        //you can also verify using argument matcher
        verify(mockedList).get(anyInt());
    }

    @Test
    public void stubSampleTest()
    {
        //stubbing
        stub(mockedList.get(0)).toReturn("first");
        stub(mockedList.get(1)).toReturn("second");

        //following prints "first"
        System.out.println(mockedList.get(0));

        //following prints "second"
        System.out.println(mockedList.get(1));

        //following prints "null" because get(999) was not stubbed
        System.out.println(mockedList.get(999));
    }

    @Test
    public void verifySampleTest()
    {

        //using mock object
        mockedList.add("one");
        mockedList.clear();
        System.out.println("Using mock obj");

        //verification
        verify(mockedList).add("one");
    }


    @Test
    public void verifyZeroInteractionsSampleTest()
    {
        //using mocks - only mockOne is interacted
        mockOne.add("one");

        //ordinary verification
        verify(mockOne).add("one");

        //verify that method was never called on a mock
        verify(mockOne, never()).add("two");

        //verify that other mocks were not interacted
        verifyZeroInteractions(mockTwo, mockThree);

    }

    @Test
    public void spyingOnRealObjectsTest()
    {
        List list = new LinkedList();
        List spy = spy(list);

        //optionally, you can stub out some methods:
        when(spy.size()).thenReturn(100);

        //using the spy calls real methods
        spy.add("one");
        spy.add("two");

        //prints "one" - the first element of a list
        System.out.println(spy.get(0));

        //size() method was stubbed - 100 is printed
        System.out.println(spy.size());

        //optionally, you can verify
        verify(spy).add("one");
        verify(spy).add("two");
    }

    @Test
    public void verifyNoMoreInteractionsSampleTest()
    {
        //using mocks
        mockedList.add("one");
        mockedList.add("two");

        verify(mockedList).add("one");

        //following verification will fail
        verifyNoMoreInteractions(mockedList);
    }

    @Test
    public void doThrowTest()
    {
        doThrow(new RuntimeException()).when(mockedList).clear();

        //following throws RuntimeException:
        mockedList.clear();

    }